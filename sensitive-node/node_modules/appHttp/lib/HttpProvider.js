var http = require('http');
var parse = require('url').parse;
var timeout = 60000;

exports.sendPost = function (url, data, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var postdata = JSON.stringify(data);
    postdata+='\r\n';
    var options = {
        host: info.hostname,
        port: info.port || 80,
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': new Buffer(postdata).length
        }
    };
    var flagNum = Math.round(Math.random()*1000);
    var req = http.request(options, function (res) {
       // res.setEncoding("utf-8");
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end', function () {
                var data = new Buffer(length), pos = 0, l = chunks.length;
                for(var i=0;i<l;i++){
                    chunks[i].copy(data, pos);
                    pos += chunks[i].length;
                }
            }).on('error',function(err){
                callback(err);
            });
    }).on('error',function(err){
            callback(err);
        });
    req.write(postdata);
    req.end();
    req.setTimeout(timeout, function () {
        req.abort();
        callback(new Error("request timeout!"));
    });
}

exports.sendGet = function (url, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var options = {
        host: info.hostname,
        port: info.port || 80,
        path: path,
        method: 'GET'
    };
    var flagNum = Math.round(Math.random()*1000);
    var req = http.request(options,function (res) {
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end',function () {
                var data = new Buffer(length), pos = 0
                    , l = chunks.length;
                for (var i = 0; i < l; i++) {
                    chunks[i].copy(data, pos);
                    pos += chunks[i].length;
                }
                callback(null, data);
            }).on('error', function (err) {
                callback(err, res);
            });
    }).on('error', function (err) {
            callback(err);
        });
    req.end();
    req.setTimeout(timeout, function () {
        req.abort();
        callback(new Error("request timeout!"));
    });
}